--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --auto=yes cachegrind.out.bad
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          ./bad_cache
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr__________________ D1mr_______________ DLmr_______________ Dw_________________ D1mw______________ DLmw______________

381,926,236 (100.0%) 1,351 (100.0%) 1,342 (100.0%) 100,694,686 (100.0%) 50,332,956 (100.0%) 50,332,753 (100.0%) 54,538,586 (100.0%) 1,048,988 (100.0%) 1,048,964 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir__________________________ I1mr__________ ILmr__________ Dr__________________________ D1mr_______________________ DLmr_______________________ Dw_________________________ D1mw______________________ DLmw______________________  file:function

< 381,796,403 (100.0%, 100.0%) 5 (0.4%, 0.4%) 5 (0.4%, 0.4%) 100,663,306 (100.0%, 100.0%) 50,331,650 (100.0%, 100.0%) 50,331,650 (100.0%, 100.0%) 54,525,958 (100.0%, 100.0%) 1,048,577 (100.0%, 100.0%) 1,048,577 (100.0%, 100.0%)  /workspace/bad_cache.c:main

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir__________________________ I1mr__________ ILmr__________ Dr__________________________ D1mr_______________________ DLmr_______________________ Dw_________________________ D1mw______________________ DLmw______________________  function:file

> 381,796,407 (100.0%, 100.0%) 5 (0.4%, 0.4%) 5 (0.4%, 0.4%) 100,663,306 (100.0%, 100.0%) 50,331,650 (100.0%, 100.0%) 50,331,650 (100.0%, 100.0%) 54,525,959 (100.0%, 100.0%) 1,048,577 (100.0%, 100.0%) 1,048,577 (100.0%, 100.0%)  main:
  381,796,403 (100.0%)         5 (0.4%)       5 (0.4%)       100,663,306 (100.0%)         50,331,650 (100.0%)         50,331,650 (100.0%)         54,525,958 (100.0%)         1,048,577 (100.0%)         1,048,577 (100.0%)            /workspace/bad_cache.c

--------------------------------------------------------------------------------
-- Annotated source file: /workspace/bad_cache.c
--------------------------------------------------------------------------------
Ir_________________ I1mr____ ILmr____ Dr__________________ D1mr_______________ DLmr_______________ Dw________________ D1mw______________ DLmw______________

-- line 9 ----------------------------------------
          .         .        .                  .                   .                   .                   .                 .                  .           // Align to 64 bytes (common cache-line size) to be explicit.
          .         .        .                  .                   .                   .                   .                 .                  .           #if defined(_MSC_VER)
          .         .        .                  .                   .                   .                   .                 .                  .           #include <malloc.h>
          .         .        .                  .                   .                   .                   .                 .                  .           #define ALIGNED_ALLOC(sz,align) _aligned_malloc((sz),(align))
          .         .        .                  .                   .                   .                   .                 .                  .           #define ALIGNED_FREE(p) _aligned_free((p))
          .         .        .                  .                   .                   .                   .                 .                  .           #else
          .         .        .                  .                   .                   .                   .                 .                  .           static void* aligned_malloc(size_t size, size_t align) {
          .         .        .                  .                   .                   .                   .                 .                  .               void* p = NULL;
          7  (0.0%) 0        0                  1   (0.0%)          0                   0                   1  (0.0%)         0                  0               if (posix_memalign(&p, align, size) != 0) return NULL;
          .         .        .                  .                   .                   .                   .                 .                  .               return p;
          .         .        .                  .                   .                   .                   .                 .                  .           }
          .         .        .                  .                   .                   .                   .                 .                  .           #define ALIGNED_ALLOC(sz,align) aligned_malloc((sz),(align))
          .         .        .                  .                   .                   .                   .                 .                  .           #define ALIGNED_FREE(p) free((p))
          .         .        .                  .                   .                   .                   .                 .                  .           #endif
          .         .        .                  .                   .                   .                   .                 .                  .
          7  (0.0%) 1 (0.1%) 1 (0.1%)           1   (0.0%)          0                   0                   3  (0.0%)         0                  0           int main(void) {
          .         .        .                  .                   .                   .                   .                 .                  .               size_t total = (size_t)M * (size_t)N;
          .         .        .                  .                   .                   .                   .                 .                  .               int *a = (int*)ALIGNED_ALLOC(total * sizeof(int), 64);
          5  (0.0%) 1 (0.1%) 1 (0.1%)           1   (0.0%)          1   (0.0%)          1   (0.0%)          0                 0                  0               if (!a) { perror("alloc"); return 1; }
          .         .        .                  .                   .                   .                   .                 .                  .
          .         .        .                  .                   .                   .                   .                 .                  .               // Fill row-major (good locality)
 12,619,785  (3.3%) 1 (0.1%) 1 (0.1%)           1   (0.0%)          0                   0                   0                 0                  0               for (int i = 0; i < M; i++) {
          .         .        .                  .                   .                   .                   .                 .                  .                   int base = i * N;
  8,392,704  (2.2%) 0        0                 0                   0                   0                   0                 0                  0                   for (int j = 0; j < N; j++) {
  8,388,608  (2.2%) 0        0                  0                   0                   0           4,194,304  (7.7%) 1,048,576 (100.0%) 1,048,576 (100.0%)              a[base + j] = i + j;
          .         .        .                  .                   .                   .                   .                 .                  .                   }
          .         .        .                  .                   .                   .                   .                 .                  .               }
          .         .        .                  .                   .                   .                   .                 .                  .
          .         .        .                  .                   .                   .                   .                 .                  .               // Column-major sweeps (intentionally bad)
          .         .        .                  .                   .                   .                   .                 .                  .               // Each successive read is N ints (N*4 bytes) apart in memory.
          .         .        .                  .                   .                   .                   .                 .                  .               // With N=4096 and 4B ints, stride = 16 KiB between accesses â†’ near-zero spatial locality.
          3  (0.0%) 0        0                  0                   0                   0                   1  (0.0%)         1   (0.0%)         1   (0.0%)      volatile uint64_t sink = 0;
          6  (0.0%) 1 (0.1%) 1 (0.1%)           0                   0                   0                   0                 0                  0               for (int pass = 0; pass < 3; pass++) {     // multiple passes to amplify misses
     49,155  (0.0%) 1 (0.1%) 1 (0.1%)           0                   0                   0                   0                 0                  0                   for (int j = 0; j < N; j++) {
151,019,520 (39.5%) 0        0                  0                   0                   0                   0                 0                  0                       for (int i = 0; i < M; i++) {
201,326,592 (52.7%) 0        0        100,663,296 (100.0%) 50,331,648 (100.0%) 50,331,648 (100.0%) 50,331,648 (92.3%)         0                  0                           sink += (uint64_t)a[(size_t)i * N + j];
          .         .        .                  .                   .                   .                   .                 .                  .                       }
          .         .        .                  .                   .                   .                   .                 .                  .                   }
          .         .        .                  .                   .                   .                   .                 .                  .               }
          .         .        .                  .                   .                   .                   .                 .                  .
          .         .        .                  .                   .                   .                   .                 .                  .               // Tiny print so the work isn't optimized away (kept minimal to avoid libc noise)
          1  (0.0%) 0        0                  1   (0.0%)          0                   0                   0                 0                  0               printf("checksum=%llu\n", (unsigned long long)sink);
          .         .        .                  .                   .                   .                   .                 .                  .
          2  (0.0%) 0        0                  0                   0                   0                   1  (0.0%)         0                  0               ALIGNED_FREE(a);
          .         .        .                  .                   .                   .                   .                 .                  .               return 0;
          8  (0.0%) 0        0                  5   (0.0%)          1   (0.0%)          1   (0.0%)          0                 0                  0           }

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir__________________ I1mr_________ ILmr_________ Dr__________________ D1mr_______________ DLmr_______________ Dw_________________ D1mw______________ DLmw______________

381,796,403 (100.0%)     5  (0.4%)     5  (0.4%) 100,663,306 (100.0%) 50,331,650 (100.0%) 50,331,650 (100.0%) 54,525,958 (100.0%) 1,048,577 (100.0%) 1,048,577 (100.0%)    annotated: files known & above threshold & readable, line numbers known
          0              0             0                   0                   0                   0                   0                  0                  0             annotated: files known & above threshold & readable, line numbers unknown
          0              0             0                   0                   0                   0                   0                  0                  0           unannotated: files known & above threshold & two or more non-identical
          0              0             0                   0                   0                   0                   0                  0                  0           unannotated: files known & above threshold & unreadable
    129,648   (0.0%) 1,322 (97.9%) 1,314 (97.9%)      31,321   (0.0%)      1,298   (0.0%)      1,095   (0.0%)     12,614   (0.0%)       410   (0.0%)       386   (0.0%)  unannotated: files known & below threshold
        185   (0.0%)    24  (1.8%)    23  (1.7%)          59   (0.0%)          8   (0.0%)          8   (0.0%)         14   (0.0%)         1   (0.0%)         1   (0.0%)  unannotated: files unknown
